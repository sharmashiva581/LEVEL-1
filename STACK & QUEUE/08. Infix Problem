import java.io.*;
import java.util.*;

public class Main{
  

public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String exp = br.readLine();

    // code
    int ans = infix(exp);
    System.out.println(ans);
 }
 
 public static int infix(String str){
     int n= str.length();
     Stack<Character> operator = new Stack<>();
     Stack<Integer> operand = new Stack<>();
     
     for(int i=0 ; i < n ; i++){
         char ch = str.charAt(i);
         
         if(ch== '('){
             operator.push(ch);
         }
        else if(ch >='0' && ch <='9'){
             operand.push(ch-'0');
         }
         else if(ch== ')'){
             // evaluate till an opening comes
             while(operator.peek()!='('){
                 char opr = operator.pop(); // opr is operator
                 int  b = operand.pop();
                 int a = operand.pop();
                 
                 int val = calculate(a , b , opr);
                 operand.push(val);
             }
             operator.pop(); // pop '('
         }
         
         else if(ch=='+'|| ch=='-'|| ch=='*'|| ch=='/'){
             while(operator.size() >0  && operator.peek()!='(' && priority(ch) <= priority(operator.peek())){
                 char opr = operator.pop();
                 int b = operand.pop();
                 int a = operand.pop();
                 
                 int val = calculate(a , b , opr);
                 operand.push(val);
             }
             operator.push(ch);
         }
     }
     // wevaluate untill operator stack is not empty
     while(operator.size() > 0){
          char opr = operator.pop();
          int b = operand.pop();
          int a = operand.pop();
                 
          int val = calculate(a , b , opr);
          operand.push(val);
     }
     return operand.peek();
 }
 public static int calculate(int a , int b , char opr){
     if(opr == '+'){
         return b + a;
     }
     else if(opr == '-'){
         return a - b;
     }
     else if(opr == '*'){
         return b * a;
     }
     else if(opr == '/'){
         return a / b;
     }
     else{
         return -1; // for compiler satisfaction only
     }
     
  }
  public static int priority(char opr){
      if(opr == '+' || opr == '-'){
          return 1;
      }
      else if(opr == '*' || opr == '/') {
          return 2;
      }
      else{
          return -1;
      }
      
  }
}
