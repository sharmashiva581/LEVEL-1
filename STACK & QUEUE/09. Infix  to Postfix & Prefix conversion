import java.io.*;
import java.util.*;

public class Main{
  

public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String exp = br.readLine();

    // code
    
    postfix(exp);
    prefix(exp);
    
 }
 public static void prefix(String str){
    
    Stack<Character> operator = new Stack<>();
    Stack<String> prefix = new Stack<>();
    
    for(int i=0 ; i< str.length() ; i++){
        char ch = str.charAt(i);
        
        if(ch == '('){
            operator.push(ch);
        }
        else if(ch >= 'a' && ch <='z'){
            prefix.push(ch+"");
        }
        else if(ch=='+'|| ch=='-'|| ch=='*'|| ch=='/' ){
            while(operator.size() >0 && operator.peek()!= '(' && priority(ch) <= priority(operator.peek())){
            // EVALUATE
            char opr = operator.pop();
                String y = prefix.pop();
                String x = prefix.pop();
                
                prefix.push(opr + x + y);
        }
        operator.push(ch);
        }
        
        else if(ch== ')'){
            while(operator.peek()!= '('){
                char opr = operator.pop();
                String y = prefix.pop();
                String x = prefix.pop();
                
                prefix.push(opr + x + y);
            }
            operator.pop(); // pop '('
        }
    }
    // evaluate untill operator stack is empty
    while(operator.size() >0){
        char opr = operator.pop();
        String y = prefix.pop();
        String x = prefix.pop();
                
        prefix.push(opr + x + y);
    }
    System.out.println(prefix.peek());
 }
 public static void postfix(String str){
      Stack<Character> operator = new Stack<>();
    Stack<String> postfix = new Stack<>();
    
    for(int i=0 ; i< str.length() ; i++){
        char ch = str.charAt(i);
        
        if(ch == '('){
            operator.push(ch);
        }
        else if(ch >= 'a' && ch <='z'){
            postfix.push(ch+"");
        }
        else if(ch=='+'|| ch=='-'|| ch=='*'|| ch=='/' ){
            while(operator.size() >0 && operator.peek()!= '(' && priority(ch) <= priority(operator.peek())){
            // EVALUATE
            char opr = operator.pop();
                String y = postfix.pop();
                String x = postfix.pop();
                
                postfix.push( x + y + opr);
        }
        operator.push(ch);
        }
        
        else if(ch== ')'){
            while(operator.peek()!= '('){
                char opr = operator.pop();
                String y = postfix.pop();
                String x = postfix.pop();
                
                postfix.push( x + y + opr);
            }
            operator.pop(); // pop '('
        }
    }
    // evaluate untill operator stack is empty
    while(operator.size() >0){
        char opr = operator.pop();
        String y = postfix.pop();
        String x = postfix.pop();
                
        postfix.push( x + y + opr);
    }
    System.out.println(postfix.peek());
 }
 public static int priority(char opr){
     if(opr == '+'|| opr=='-'){
         return 1;
     }
     else if(opr == '*'|| opr == '/'){
         return 2;
     }
     else{
         return -1;
     }
 }
}
