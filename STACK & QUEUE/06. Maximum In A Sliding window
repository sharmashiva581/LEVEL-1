import java.io.*;
import java.util.*;

public class Main{       //  FINAL OPTIMIZED CODE  FOR O(n)
  

public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    int n = Integer.parseInt(br.readLine());
    int[] a = new int[n];
    for(int i = 0; i < n; i++){
       a[i] = Integer.parseInt(br.readLine());
    }
    int k = Integer.parseInt(br.readLine());

    // code
    SlidingWindowMaximum(a ,k);
 }
 public static void SlidingWindowMaximum(int arr[] , int k){
     int ngor[] = nextGreaterElement(arr); 
     int j=0;
     
     for(int i=0 ; i<= arr.length-k ; i++){
         if(j < i){
              j=i;
         }
         // arr.length-k is the starting pposition for last window 
         
         while( ngor[j] < i+k){
             // means next greater element lies within window
             j= ngor[j];
         }
         System.out.println(arr[j]);
         
     }
 }
 
 public static int[] nextGreaterElement(int arr[]){
    int ngr[] = new int[arr.length];
    Stack<Integer> st = new Stack<>();
    
    ngr[arr.length-1] = arr.length;
    st.push(arr.length-1);
    
    for(int i=arr.length-2 ; i>=0 ; i--){
        while(st.size()> 0 && arr[st.peek()] <= arr[i]){
            st.pop();
        }
        if(st.size()==0){
            ngr[i] = arr.length;
        }
        else{ // when arr[st.peek()] > arr[i]
            ngr[i] = st.peek();
        }
        st.push(i);
    }
     return ngr;
 }
}
