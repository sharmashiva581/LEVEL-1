import java.io.*;
import java.util.*;

public class Main {
  private static class Node {
    int data;
    ArrayList<Node> children = new ArrayList<>();
  }

  public static void display(Node node) {
    String str = node.data + " -> ";
    for (Node child : node.children) {
      str += child.data + ", ";
    }
    str += ".";
    System.out.println(str);

    for (Node child : node.children) {
      display(child);
    }
  }

  public static Node construct(int[] arr) {
    Node root = null;

    Stack<Node> st = new Stack<>();
    for (int i = 0; i < arr.length; i++) {
      if (arr[i] == -1) {
        st.pop();
      } else {
        Node t = new Node();
        t.data = arr[i];

        if (st.size() > 0) {
          st.peek().children.add(t);
        } else {
          root = t;
        }

        st.push(t);
      }
    }

    return root;
  }
  public static class pair{
      Node node;
      int state;
      
      pair(){
          
      }
      pair(Node node , int state){
          this.node = node;
          this.state = state;
      }
     
  }

  public static void IterativePreandPostOrder(Node node) { /************************************************************************************************/
   
    Stack<pair> st = new Stack<>();
    pair rp = new pair(node , -1); // root pair
    
    StringBuilder pre = new StringBuilder("");
    StringBuilder post = new StringBuilder("");
    
    st.push(rp);
    
    while(st.size() > 0){
        // pop
        pair top = st.peek();
        Node tn = top.node; // top pair's node
        int ts = top.state; // top pair's state
        
        if(ts == -1){
             // -1 state means  = add in pre , state++
             pre.append(tn.data + " ");
             top.state++;
        }
        else if(ts >= 0 && ts < tn.children.size()){
             // 0 to children.size -1 =  child push , state++
             Node child =tn.children.get(ts);
             st.push(new pair(child , -1));
             top.state++;
        }
        else if(ts == tn.children.size()){
             // if child state == node's children size =add in  post ,and pop
             post.append(tn.data + " ");
             st.pop();
        }
    }
    System.out.println(pre);
    System.out.println(post);
  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine());
    int[] arr = new int[n];
    String[] values = br.readLine().split(" ");
    for (int i = 0; i < n; i++) {
      arr[i] = Integer.parseInt(values[i]);
    }

    Node root = construct(arr);
    IterativePreandPostOrder(root);
  }

}
