import java.io.*;
import java.util.*;

public class Main {
  private static class Node {
    int data;
    ArrayList<Node> children = new ArrayList<>();
  }

  public static void display(Node node) {
    String str = node.data + " -> ";
    for (Node child : node.children) {
      str += child.data + ", ";
    }
    str += ".";
    System.out.println(str);

    for (Node child : node.children) {
      display(child);
    }
  }

  public static Node construct(int[] arr) {
    Node root = null;

    Stack<Node> st = new Stack<>();
    for (int i = 0; i < arr.length; i++) {
      if (arr[i] == -1) {
        st.pop();
      } else {
        Node t = new Node();
        t.data = arr[i];

        if (st.size() > 0) {
          st.peek().children.add(t);
        } else {
          root = t;
        }

        st.push(t);
      }
    }

    return root;
  }
  
  // METHOD 1 = USING STATIC VARIABLES /***************************************************************************************************/
  
  static int lss; // largest subtree sum
  static Node lssn;// largest subtree sum node
  
  public static void largestSubtreeSum(Node node){
      lss = Integer.MIN_VALUE;
      lssn = null;
      
      subtreeSum(node);
      System.out.println(lssn.data + "@" + lss);
  }
  
   public static int subtreeSum(Node node){
       int ss = 0;// subtree sum
       
       for(Node child : node.children){
          int css = subtreeSum(child); // child subtree sum
          ss += css;
       }
       
       ss += node.data;
       
       if(ss > lss){
           lss = ss;
           lssn = node;
       }
       return ss;
   }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine());
    int[] arr = new int[n];
    String[] values = br.readLine().split(" ");
    for (int i = 0; i < n; i++) {
      arr[i] = Integer.parseInt(values[i]);
    }

    Node root = construct(arr);
    // write your code here
    
     largestSubtreeSum(root);
  
  }

}
