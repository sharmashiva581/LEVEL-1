import java.io.*;
import java.util.*;

public class Main {

  public static class PriorityQueue {
    ArrayList<Integer> data;

    public PriorityQueue() {
      data = new ArrayList<>();
    }
    private void upHeapify(int ci){
        if(ci == 0){
            return;
        }
        int pi = (ci-1)/2;
    if(data.get(ci) < data.get(pi)){
            swap(ci , pi);
            upHeapify(pi);
        }
    }
    private void swap(int ci , int pi){
       int ci_val = data.get(ci);
       int pi_val = data.get(pi);
       
       data.set(ci , pi_val);
       data.set(pi , ci_val);
        
    }
    public void add(int val) {
      // write your code here
      
          data.add(val);
           upHeapify(data.size()-1);
    }

    public int remove() {
      // write your code here
       if(data.size () <=0){
          System.out.println("Underflow");
          return -1;
      }
      else{
           int li = data.size()-1;
            swap(0 , li);
           int val =  data.remove(li);
            
          
          downHeapify(0);
          return val;
      }
     
    }
    public void downHeapify(int pi){ // parent index
        int lci = (2*pi)+1; // left child index
        int rci = (2*pi)+2;
         int hpi = pi; // highest priority index
        
       if( lci < data.size() && data.get(hpi) > data.get(lci)){
           hpi = lci;
       }
        if( rci < data.size() && data.get(hpi) > data.get(rci)){
           hpi = rci;
       }
       
       if(pi != hpi){
           swap(pi , hpi);
           downHeapify(hpi);
       }
    }

    public int peek() {
      if(data.size () <=0){
          System.out.println("Underflow");
          return -1;
      }
      else{
          return data.get(0);
      }
    }

    public int size() {
      // write your code here
      return data.size();
    }
  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    PriorityQueue qu = new PriorityQueue();

    String str = br.readLine();
    while (str.equals("quit") == false) {
      if (str.startsWith("add")) {
        int val = Integer.parseInt(str.split(" ")[1]);
        qu.add(val);
      } else if (str.startsWith("remove")) {
        int val = qu.remove();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("peek")) {
        int val = qu.peek();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("size")) {
        System.out.println(qu.size());
      }
      str = br.readLine();
    }
  }
}
